{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Community Guide to Open-Source AI Software Craft","text":"<p>This is a community-managed informational website with a comprehensive guide to open-source tools available in the AI-assisted software development / software engineering space.</p> <ul> <li>Codex CLI</li> <li>Gemini CLI</li> <li>Aider</li> <li>OpenHands</li> <li>OpenCode</li> <li>GitHub Copilot Chat</li> <li>Goose</li> <li>Cline</li> <li>RooCode</li> <li>Continue</li> <li>Refact</li> <li>Ruler</li> <li>LLM</li> </ul> <p>The guide as the initiative of Eleanor Berger (AI Expertise) and is sponsored and maintained by her, with active participation from community contributors.</p>"},{"location":"aider/","title":"Aider","text":"Website GitHub License Tags aider.chat paul-gauthier/aider Apache 2.0 <code>cli</code> <p>Aider is an AI-powered pair programmer that runs in your terminal. It allows you to code with a large language model to edit code in your local git repository.</p> <p>Aider is a command-line tool that brings the power of AI to your terminal, allowing you to work with a large language model to write and edit code. It's designed to be a seamless and intuitive experience, integrating directly with your local git repository. This allows you to easily track changes, and it feels like you're pair programming with a very capable assistant.</p>","tags":["cli"]},{"location":"aider/#key-features","title":"Key Features","text":"<ul> <li>Git Integration: Aider's deep integration with git is one of its standout features. It automatically commits changes with descriptive messages, making it easy to see what the AI has done and to undo changes if necessary. This makes it a safe and transparent way to work with an AI assistant.</li> <li>Cross-Platform and IDE Agnostic: Because it's a command-line tool, Aider can be used with any IDE or text editor. Whether you're using VS Code, IntelliJ, PyCharm, or Vim, you can use Aider without needing a specific plugin. This makes it a flexible tool that can fit into any developer's workflow.</li> <li>Multi-File Editing: Aider is capable of editing multiple files at once to handle complex requests. This is a powerful feature that allows you to make changes across your entire codebase with a single prompt.</li> <li>Repository Map: Aider creates a map of your entire git repository, which helps it to understand the context of your code and make more relevant and accurate changes. This is a key feature that sets it apart from other tools that only look at the current file.</li> </ul> <p>Aider is a powerful and flexible tool for any developer who wants to leverage the power of AI in their daily workflow. Its deep integration with git, its ability to edit multiple files, and its repository-aware context make it a valuable addition to any developer's toolkit.</p>","tags":["cli"]},{"location":"cline/","title":"Cline","text":"Website GitHub License Tags cline.bot i-continue/cline Apache 2.0 <code>vscode</code> <p>Cline is an AI-powered coding assistant that works as a Visual Studio Code extension. It helps developers write code more efficiently by providing intelligent code suggestions, automating tasks, and integrating with various AI models.</p> <p>Cline is a powerful and flexible AI coding assistant that is designed to be a seamless extension of your Visual Studio Code environment. It's a versatile tool that can help you with a wide range of programming tasks, from generating code and automating tasks to interacting with various AI models. The tool is built with a focus on extensibility, allowing you to customize it to fit your specific needs.</p>","tags":["vscode"]},{"location":"cline/#key-features","title":"Key Features","text":"<ul> <li>Visual Studio Code Integration: Cline is a Visual Studio Code extension, which means it is deeply integrated into your development environment. This allows it to provide context-aware assistance and to be a seamless part of your workflow.</li> <li>Model Flexibility: Cline supports multiple AI models, including those from Anthropic (Claude), OpenAI (GPT), and Google (Gemini). This gives you the flexibility to choose the best model for your needs, or even to use multiple models for different tasks.</li> <li>Extensibility: Cline is designed to be extensible, allowing you to create custom tools to fit your workflow. This means you can add new commands, integrations, and features to the tool to fit your specific needs.</li> <li>File and Command Execution: Cline can create and edit files, showing you a diff of the changes, and can run commands in your terminal. This makes it a powerful tool for automating a wide range of tasks.</li> </ul> <p>Cline is a powerful and flexible tool for any developer who wants to leverage the power of AI in their daily workflow. Its deep integration with Visual Studio Code, its support for multiple AI models, and its extensibility make it a valuable addition to any developer's toolkit.</p>","tags":["vscode"]},{"location":"codex-cli/","title":"Codex CLI","text":"Website GitHub License Tags openai.com/blog/openai-codex openai/codex-cli Apache 2.0 <code>cli</code> <p>Codex CLI is a command-line interface that brings the power of OpenAI's Codex to your terminal. It allows you to interact with your codebase using natural language, making it a powerful tool for a variety of software development tasks.</p> <p>Codex CLI is designed to be a versatile and intuitive tool for developers. It can be used in several modes, providing flexibility in how you interact with your code. The primary goal of Codex CLI is to accelerate development by allowing you to express your intent in plain English, which the tool then translates into code.</p>","tags":["cli"]},{"location":"codex-cli/#key-features","title":"Key Features","text":"<ul> <li>Natural Language Interaction: The core feature of Codex CLI is its ability to understand and respond to natural language prompts. You can ask it to perform tasks like \"create a new function that takes a string as input and returns the reverse of that string\" and it will generate the corresponding code.</li> <li>Multiple Interaction Modes:<ul> <li>Suggest Mode: In this mode, Codex CLI will propose changes to your code, which you can then approve or reject. This gives you full control over the modifications being made.</li> <li>Auto Edit Mode: This mode automatically applies file edits but will prompt you for confirmation before executing any shell commands. This is a good balance between automation and safety.</li> <li>Full Auto Mode: In this mode, Codex CLI will run on its own, confined to a directory that you specify. This is useful for tasks that you are confident can be automated without supervision.</li> </ul> </li> <li>Code Understanding: Beyond just generating code, Codex CLI can also help you understand unfamiliar codebases. You can ask it to explain a specific function or file, and it will provide a natural language description of what the code does.</li> </ul> <p>Codex CLI is a powerful tool for any developer looking to leverage the power of AI to improve their workflow. Its ability to understand natural language and interact with your code in a variety of ways makes it a valuable addition to any developer's toolkit.</p>","tags":["cli"]},{"location":"continue/","title":"Continue","text":"Website GitHub License Tags continue.dev continuedev/continue Apache 2.0 <code>vscode</code>, <code>gui</code> <p>Continue is an open-source AI code assistant that can be used as a plugin in IDEs like VS Code and JetBrains. It offers features like code completion, chat, and refactoring.</p> <p>Continue is a powerful and flexible AI code assistant that is designed to be a seamless extension of your IDE. It's a versatile tool that can help you with a wide range of programming tasks, from generating code and automating tasks to refactoring and understanding your codebase. The tool is built with a focus on being open source and customizable, allowing you to tailor it to your specific needs.</p>","tags":["vscode","gui"]},{"location":"continue/#key-features","title":"Key Features","text":"<ul> <li>IDE Integration: Continue is available as a plugin for popular IDEs like VS Code and JetBrains. This means it is deeply integrated into your development environment, allowing it to provide context-aware assistance and to be a seamless part of your workflow.</li> <li>AI-Powered Chat: Continue includes an AI-powered chat interface that allows you to ask questions and get help with your code. You can ask it to explain a piece of code, suggest a refactoring, or even generate a new function from scratch.</li> <li>Code Completion and Refactoring: Continue provides intelligent code completion that can help you to write code more efficiently. It can also help you to refactor your code, suggesting improvements and automating the process of making changes.</li> <li>Open Source and Customizable: Continue is an open-source project, which means that you can inspect the code, contribute to the project, and even host it yourself. It's also highly customizable, allowing you to create your own custom commands and integrations.</li> </ul> <p>Continue is a powerful and flexible tool for any developer who wants to leverage the power of AI in their daily workflow. Its deep integration with popular IDEs, its AI-powered chat interface, and its open-source and customizable design make it a valuable addition to any developer's toolkit.</p>","tags":["vscode","gui"]},{"location":"gemini-cli/","title":"Gemini CLI","text":"Website GitHub License Tags - google/gemini-cli Apache 2.0 <code>cli</code> <p>Gemini CLI is a command-line interface from Google that allows you to interact with the Gemini family of models. It's a powerful tool for developers who want to leverage the capabilities of Gemini for a wide range of software engineering tasks.</p> <p>Gemini CLI is designed to be a versatile and powerful tool for developers, providing access to Google's advanced AI models directly from the terminal. It can be used for a variety of tasks, from answering questions and generating code to automating complex workflows. The tool is built with developers in mind, offering a seamless way to integrate the power of Gemini into their daily work.</p>","tags":["cli"]},{"location":"gemini-cli/#key-features","title":"Key Features","text":"<ul> <li>Direct Access to Gemini Models: The primary feature of Gemini CLI is its ability to provide direct access to the Gemini family of models. This allows you to leverage the power of these models for a wide range of tasks without needing to use a web-based interface.</li> <li>Code Generation and Understanding: Gemini CLI can be used to generate code snippets, write entire functions, and even create new applications from scratch. It can also be used to understand existing codebases, providing explanations of complex code in natural language.</li> <li>Automation of Operational Tasks: Beyond just coding, Gemini CLI can be used to automate a variety of operational tasks. This can include things like writing scripts, managing infrastructure, and interacting with other tools and services.</li> <li>Extensibility: Gemini CLI is designed to be extensible, allowing you to create custom commands and integrations to suit your specific needs. This makes it a flexible tool that can be adapted to a wide variety of workflows.</li> </ul> <p>Gemini CLI is a powerful tool for any developer looking to leverage the power of Google's Gemini models. Its ability to interact with your code, automate tasks, and provide access to advanced AI capabilities makes it a valuable addition to any developer's toolkit.</p>","tags":["cli"]},{"location":"github-copilot-chat/","title":"GitHub Copilot Chat","text":"Website GitHub License Tags github.com/features/copilot microsoft/vscode-copilot-chat MIT <code>gui</code>, <code>vscode</code> <p>GitHub Copilot Chat is an AI-powered chat interface for Visual Studio Code that assists with various coding-related tasks.</p> <p>The GitHub Copilot Chat extension for Visual Studio Code brings the power of GitHub Copilot directly into the editor, providing a chat-based interface for interacting with the AI assistant. While the extension itself is open-source under the MIT license, the underlying GitHub Copilot service that powers it is a proprietary, subscription-based product. This page focuses on the open-source VS Code extension.</p>","tags":["gui","vscode"]},{"location":"github-copilot-chat/#key-features","title":"Key Features","text":"<ul> <li>Deep Integration with GitHub: GitHub Copilot Chat is deeply integrated with the GitHub ecosystem, which allows it to provide context-aware assistance. It can answer questions about specific repositories, commits, and pull requests, and it can even help you to write commit messages and release notes.</li> <li>Code Generation and Explanation: GitHub Copilot Chat can be used to generate code snippets, write entire functions, and even create new applications from scratch. It can also be used to understand existing codebases, providing explanations of complex code in natural language.</li> <li>Debugging and Security Fixes: The tool can help you to identify and fix bugs in your code, and it can also suggest remediations for security vulnerabilities. This makes it a valuable tool for improving the quality and security of your code.</li> <li>Availability in Multiple Environments: GitHub Copilot Chat is available in a variety of environments, including your IDE, the GitHub website, and the GitHub Mobile app. This makes it a convenient and accessible tool that you can use wherever you are.</li> </ul> <p>GitHub Copilot Chat is a powerful and versatile tool for any developer who wants to leverage the power of AI in their daily workflow. Its deep integration with the GitHub ecosystem, its ability to generate and explain code, and its availability in multiple environments make it a valuable addition to any developer's toolkit.</p>","tags":["gui","vscode"]},{"location":"goose/","title":"Goose","text":"Website GitHub License Tags block.github.io/goose block/goose Apache 2.0 <code>cli</code>, <code>gui</code> <p>Goose is a local, extensible, open source AI agent that automates engineering tasks from start to finish.</p> <p>Goose is your on-machine AI agent, capable of automating complex development tasks autonomously. More than just code suggestions, Goose can build entire projects from scratch, write and execute code, debug failures, orchestrate workflows, and interact with external APIs. Whether you're prototyping an idea, refining existing code, or managing intricate engineering pipelines, Goose adapts to your workflow and executes tasks with precision.</p>","tags":["cli","gui"]},{"location":"goose/#key-features","title":"Key Features","text":"<ul> <li>Autonomous Development Tasks: Goose can build entire projects from scratch, write and execute code, debug failures, and manage complex engineering workflows without requiring constant supervision.</li> <li>Multi-LLM Support: Designed for maximum flexibility, Goose works with any LLM and supports multi-model configuration to optimize performance and cost for different types of tasks.</li> <li>MCP Server Integration: Seamlessly integrates with MCP (Model Context Protocol) servers, allowing for extended functionality and integration with external tools and APIs.</li> <li>Dual Interface Options: Available as both a desktop application and a command-line interface, making it accessible for different developer preferences and workflows.</li> <li>Local and Extensible: Runs locally on your machine for privacy and security, while being extensible through its open architecture to adapt to your specific development needs.</li> </ul> <p>Goose is a powerful and flexible tool for any developer who wants to leverage autonomous AI assistance in their daily workflow. Its ability to handle complete development tasks, multi-model support, and availability in both GUI and CLI formats make it a comprehensive solution for AI-assisted software engineering.</p>","tags":["cli","gui"]},{"location":"llm/","title":"LLM","text":"Website GitHub License Tags llm.datasette.io simonw/llm Apache 2.0 <code>cli</code> <p>LLM is a command-line tool and Python library for interacting with large language models.</p> <p>LLM is a powerful and versatile tool for interacting with large language models from the command line. Created by Simon Willison, co-creator of Django, it provides a unified interface for working with a wide range of models, including those from OpenAI, Anthropic, Google, and Meta. It's designed with the Unix philosophy of composable tools in mind, allowing it to be piped with other command-line utilities.</p>","tags":["cli"]},{"location":"llm/#key-features","title":"Key Features","text":"<ul> <li>Unified Interface for Multiple Models: LLM provides a single, consistent interface for interacting with a wide range of large language models. This means you can use the same commands and syntax to work with models from different providers, making it easy to switch between them.</li> <li>Extensible Plugin System: LLM has an extensible plugin system that allows you to add support for new models and to create custom commands and integrations. This makes it a flexible tool that can be adapted to a wide variety of workflows.</li> <li>Composable Command-Line Tool: LLM is designed to be a composable command-line tool, which means it can be piped with other command-line utilities. This allows you to create powerful and complex workflows by combining LLM with other tools.</li> <li>Conversation History and Embeddings: LLM provides features for managing your conversation history, storing your prompts and responses in a SQLite database. It also allows you to work with embeddings, which can be used for a variety of tasks, such as semantic search and clustering.</li> </ul> <p>LLM is a powerful and flexible tool for any developer who wants to leverage the power of large language models from the command line. Its unified interface, its extensible plugin system, and its composable design make it a valuable addition to any developer's toolkit.</p>","tags":["cli"]},{"location":"open-code/","title":"OpenCode","text":"Website GitHub License Tags - opencode-ai/opencode MIT <code>cli</code> <p>OpenCode is a terminal-based AI coding assistant that helps you with a variety of tasks, such as answering questions about your code, generating new code, and debugging and fixing errors.</p> <p>OpenCode is a powerful and flexible AI coding assistant that runs in your terminal. It's designed to be a versatile tool that can help you with a wide range of programming tasks, from answering simple questions to generating complex code. The tool is built with a modular architecture, which allows it to be easily extended and customized to fit your specific needs.</p>","tags":["cli"]},{"location":"open-code/#key-features","title":"Key Features","text":"<ul> <li>Terminal-Based Interface: OpenCode is a command-line tool, which means you can use it with any IDE or text editor. This makes it a flexible tool that can be easily integrated into any developer's workflow.</li> <li>Multiple AI Models: OpenCode supports a variety of AI models, giving you the flexibility to choose the best model for your needs. This means you can use models from different providers, or even use local models that you've trained yourself.</li> <li>Modular Architecture: The tool is built with a modular architecture, which allows it to be easily extended and customized. This means you can add new commands, integrations, and features to the tool to fit your specific needs.</li> <li>Client/Server Architecture: OpenCode uses a client/server architecture, which allows you to run the AI model on a separate machine from your development machine. This can be useful for a variety of reasons, such as if you want to use a more powerful machine to run the AI model, or if you want to share the AI model with other developers on your team.</li> </ul> <p>OpenCode is a powerful and flexible tool for any developer who wants to leverage the power of AI in their daily workflow. Its terminal-based interface, its support for multiple AI models, and its modular architecture make it a valuable addition to any developer's toolkit.</p>","tags":["cli"]},{"location":"open-hands/","title":"OpenHands","text":"Website GitHub License Tags all-hands.dev All-Hands-AI/OpenHands MIT <code>cli</code> <p>OpenHands is an open-source platform for creating and deploying AI agents that can perform software development tasks like a human developer.</p> <p>OpenHands is a powerful and flexible platform for building and deploying AI agents that can perform a wide range of software development tasks. It's designed to be a collaborative tool, allowing you to work with AI agents to write and modify code, run commands, browse the web, and interact with APIs. The goal of OpenHands is to improve development efficiency by automating repetitive coding tasks, assisting with code generation, debugging, and testing.</p>","tags":["cli"]},{"location":"open-hands/#key-features","title":"Key Features","text":"<ul> <li>Autonomous Agents: OpenHands allows you to create and deploy autonomous agents that can perform a wide range of software development tasks. These agents can navigate codebases, test changes, and resolve issues on their own, freeing you up to focus on more complex and creative work.</li> <li>LLM Support: OpenHands supports a variety of large language models, giving you the flexibility to choose the best model for your needs. It also provides a sandboxed environment for agent development and deployment, ensuring that your code and data are secure.</li> <li>Integration with Existing Tools: The platform is designed to integrate with your existing development tools and workflows. This means you can use OpenHands with your favorite IDE, version control system, and other tools without having to change your workflow.</li> <li>Community-Driven: OpenHands is a community-driven project, with contributions from both academia and industry. This means that the platform is constantly evolving and improving, with new features and capabilities being added all the time.</li> </ul> <p>OpenHands is a powerful and flexible platform for any developer who wants to leverage the power of AI to automate their workflow. Its ability to create and deploy autonomous agents, its support for a variety of LLMs, and its integration with existing tools make it a valuable addition to any developer's toolkit.</p>","tags":["cli"]},{"location":"refact/","title":"Refact","text":"Website GitHub License Tags refact.ai refact-ai/refact BSD-3-Clause <code>vscode</code>, <code>gui</code> <p>Refact.ai is an open-source AI coding assistant that you can use as a plugin in IDEs like VS Code and JetBrains. It's designed to help developers with a variety of tasks, making coding faster and improving code quality.</p> <p>Refact.ai is a powerful and versatile AI coding assistant that is designed to be a seamless extension of your IDE. It's a comprehensive tool that can help you with a wide range of programming tasks, from generating code and automating tasks to refactoring and analyzing your codebase. The tool is built with a focus on being open source and customizable, allowing you to tailor it to your specific needs.</p>","tags":["vscode","gui"]},{"location":"refact/#key-features","title":"Key Features","text":"<ul> <li>IDE Integration: Refact.ai is available as a plugin for popular IDEs like VS Code and JetBrains. This means it is deeply integrated into your development environment, allowing it to provide context-aware assistance and to be a seamless part of your workflow.</li> <li>Code Completion and Refactoring: Refact.ai provides intelligent code completion that can help you to write code more efficiently. It can also help you to refactor your code, suggesting improvements and automating the process of making changes.</li> <li>In-IDE Chat: Refact.ai includes an in-IDE chat interface that allows you to ask questions and get help with your code. You can ask it to explain a piece of code, suggest a refactoring, or even generate a new function from scratch.</li> <li>On-Premise Deployment: For enhanced security, you can host Refact.ai on your own servers, ensuring that your code remains private. This makes it a great option for teams and organizations that have strict security requirements.</li> </ul> <p>Refact.ai is a powerful and flexible tool for any developer who wants to leverage the power of AI in their daily workflow. Its deep integration with popular IDEs, its intelligent code completion and refactoring capabilities, and its on-premise deployment option make it a valuable addition to any developer's toolkit.</p>","tags":["vscode","gui"]},{"location":"roocode/","title":"RooCode","text":"Website GitHub License Tags - RooCode/RooCode Apache 2.0 <code>vscode</code> <p>RooCode is an open-source AI coding assistant that functions as a VS Code extension. It provides agentic AI capabilities, allowing it to understand your entire codebase, and read and write files across your project.</p> <p>RooCode is a powerful and flexible AI coding assistant that is designed to be a seamless extension of your Visual Studio Code environment. It's a versatile tool that can help you with a wide range of programming tasks, from generating code and automating tasks to understanding your entire codebase. The tool is built with a focus on being model-agnostic, allowing you to use it with a variety of AI models.</p>","tags":["vscode"]},{"location":"roocode/#key-features","title":"Key Features","text":"<ul> <li>Visual Studio Code Integration: RooCode is a Visual Studio Code extension, which means it is deeply integrated into your development environment. This allows it to provide context-aware assistance and to be a seamless part of your workflow.</li> <li>Agentic AI Capabilities: RooCode has agentic AI capabilities, which means it can understand your entire codebase and read and write files across your project. This allows it to perform complex tasks that require a deep understanding of your code.</li> <li>Model-Agnostic: RooCode is model-agnostic, which means you can use it with a variety of AI models, including those from OpenAI, Anthropic, or local models. This gives you the flexibility to choose the best model for your needs, or even to use multiple models for different tasks.</li> <li>Open Source: RooCode is an open-source project, which means that you can inspect the code, contribute to the project, and even host it yourself. This makes it a transparent and trustworthy tool that you can rely on.</li> </ul> <p>RooCode is a powerful and flexible tool for any developer who wants to leverage the power of AI in their daily workflow. Its deep integration with Visual Studio Code, its agentic AI capabilities, and its model-agnostic design make it a valuable addition to any developer's toolkit.</p>","tags":["vscode"]},{"location":"ruler/","title":"Ruler","text":"Website GitHub License Tags intellectronica/ruler intellectronica/ruler MIT <code>cli</code> <p>Ruler is a command-line tool designed to manage and synchronize instructions for various AI coding assistants.</p> <p>Ruler is a command-line tool that helps you to manage and synchronize instructions for various AI coding assistants. As teams grow, managing the configurations for different AI agents like GitHub Copilot, Claude, and others can lead to inconsistencies. Ruler addresses this by providing a single source of truth for all AI agent instructions, distributing them to the correct configuration files.</p>","tags":["cli"]},{"location":"ruler/#key-features","title":"Key Features","text":"<ul> <li>Centralized Rule Management: Ruler allows you to store all of your AI instructions in a dedicated <code>.ruler/</code> directory. This makes it easy to manage and version your instructions, and it ensures that everyone on your team is using the same set of rules.</li> <li>Automatic Distribution: Ruler automatically applies your rules to the configuration files of supported AI agents. This saves you the time and effort of having to manually update the configuration files for each tool.</li> <li>Simplified Onboarding: Ruler makes it easier to onboard new AI tools into your project. Instead of having to manually configure each tool, you can simply add a new configuration file to your <code>.ruler/</code> directory and Ruler will take care of the rest.</li> <li>Extensibility: Ruler is designed to be extensible, allowing you to add support for new AI tools and to create custom rules and configurations. This makes it a flexible tool that can be adapted to a wide variety of workflows.</li> </ul> <p>Ruler is a powerful and flexible tool for any team that is using multiple AI coding assistants. Its ability to centralize and synchronize instructions, its automatic distribution capabilities, and its extensibility make it a valuable addition to any team's toolkit.</p>","tags":["cli"]},{"location":"tags/","title":"Tags","text":"<p>Click on a tag to see all pages associated with it.</p>"},{"location":"tags/#tag:cli","title":"cli","text":"<ul> <li>            Aider          </li> <li>            Codex CLI          </li> <li>            Gemini CLI          </li> <li>            Goose          </li> <li>            LLM          </li> <li>            OpenCode          </li> <li>            OpenHands          </li> <li>            Ruler          </li> </ul>"},{"location":"tags/#tag:gui","title":"gui","text":"<ul> <li>            Continue          </li> <li>            GitHub Copilot Chat          </li> <li>            Goose          </li> <li>            Refact          </li> </ul>"},{"location":"tags/#tag:vscode","title":"vscode","text":"<ul> <li>            Cline          </li> <li>            Continue          </li> <li>            GitHub Copilot Chat          </li> <li>            Refact          </li> <li>            RooCode          </li> </ul>"}]}